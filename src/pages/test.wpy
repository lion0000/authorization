<style lang="less">
    .container{
      display: flex;
      flex-flow: column;
      overflow: hidden;
      .surround{
          display:flex;
          flex-flow: row;
          position:relative;
          flex: 1;
          map{
            width: 100%;
            height: auto;
            flex: 1;
            .track{
              position: absolute;
              right: 0;
              .track_icon{
                width: 120rpx;
                height: 120rpx;
              }
            }
          }
          
          .test_mileage_show{
            flex: 1;
            display: flex;
            flex-direction: column;
            padding: 20rpx;
            .test_mileage_title{
              width: 100%;
              display: flex;
              justify-content: space-between;
              padding-bottom: 20rpx;
              flex-shrink:0;
              .icon_top{
                display: flex;
                image{
                  width: 40rpx;
                  height: 40rpx;
                  margin-right: 10rpx;
                }
              }
              .kilometre{
                text-align: right;
                .card-num{
                  color: #467EEC;
                }
                .einheit{
                  font-size: 18rpx;
                }
              }
              .title_icon{
                position:relative;
                top:4rpx;
                margin-right: 10rpx;
              }
            }
            .myecharts{
              // flex-basis: 100%;
              // flex: 1;
              background-color: #467EED;
              border-radius: 20rpx;
            }
          }
        .terminal-list-container{
           width: 60%;
           height:auto;
           flex-shrink: 0;
           overflow-y: auto;
           background-color: #FFF;
           
           .device-title{
              background-color:#467eec;
              height:64rpx;
              color:#FFFFFF;
              font-size:32rpx;
              line-height:64rpx;
              padding-left:30rpx;
           }
           .device-row-data{
                height:62rpx;
                text{
                  font-size:38rpx;
                  color:#467eec;
                  padding:20rpx;
                }
                .switch-container{
                  float: right;
                  margin-right: 20rpx;
                  margin-top:8rpx;
                  .van-icon{
                    color: #FFF
                  }
                }
                .Online{
                  color: #00c79e
                }
                .Offline{
                  color: #a3a3a3
                }
           }
        }
      }
      .map_narrow{
        height:30%;
        flex:none;
      }  
      .opera-container{
        width: 100%;
        display: block;
        background-color: #FFF;
        .opera-button-group{
            padding: 5px;            
            .opera-button{
                background-color: #0079f3;
                color: #FFF;
                text-align: center;
                .time_quantum{
                  position:relative;
                  display:flex;
                  .start_year{
                    position:absolute;
                    top:-16rpx;
                    font-size:26rpx;
                    color: #AEAEAE;
                  }
                  .a_date{
                    position: relative;;
                    top:16rpx;
                  }
                }
            }
        }
      }
      .opera-view{
        width: 100%;
        background-color: #FFF;
        padding-bottom: 10rpx;
        .van-row{
          margin: 0 !important;
          padding: 0 10rpx !important;
        }
        .van-col{
          padding-left: 10rpx !important;
          padding-right: 10rpx !important;
        }
        .opera-card-group{
           .opera-col{
              text-align: center;
              .opera-card{
                height: 230rpx;
                box-shadow: #ececec 0px 0px 15px;
                border-radius: 1em;
                text-align: left;
                border: 1px solid transparent;
                transition: border 500ms;
                .card-num{
                   padding-left: 30rpx;
                   color: #444444;
                   font-size: 35rpx;
                }
                .card-text{
                   padding-left: 30rpx;
                   font-size: 20rpx;
                   color: #666666;
                }
                .icon{
                  height: 50rpx;
                  width: 50rpx;
                }
                .loading{
                  height: 36rpx;
                  width: 36rpx;
                }
                .card-icon{
                  padding: 30rpx;
                  font-size: 45rpx;
                  text-align: left;
                }
                .icon-terminal{
                  float: right;
                  font-size: 45rpx;
                  margin-right: 15rpx;
                  height: 40rpx;
                }
              }
              .active{
                border: 1px solid #467EEC
              }
              .actives{
                border: 1px solid transparent;
              }           
           }
        }
      }
    }
</style>
<template>
    <view class="container">

          <view class="surround {{map_narrow==1?'map_narrow':''}}">
              <map class="map" wx:if="{{map_switch}}" id="map" longitude="{{longitude}}" latitude="{{latitude}}" bindtap="tapMap" scale="{{scale}}"  bindregionchange="regionChange" polyline="{{polyline}}" markers="{{markers}}">
                <cover-view class="track" wx:if="{{!showTerminal}}">
                  <cover-view class="track_icon" bindtap="showTerminalFn">
                    <cover-image src="../images/track.png" />
                  </cover-view>
                  <cover-view class="track_icon" bindtap="pullData">
                    <cover-image class="" src="../images/refresh.png" />
                  </cover-view>
                </cover-view>
              </map>
        
              <view class="test_mileage_show" wx:if="{{!map_switch}}">
                <view class="test_mileage_title">
                  <view class="icon_top">
                    <image src="{{title_icon}}"></image><text class="card-text">{{title_name}}</text>
                  </view>
                  <view class="kilometre">
                    <text class="card-num">{{title_total}}</text><text class="einheit">{{einheit}}</text>
                  </view>
                </view>
                <view class="myecharts" id="mychart">
                  <echarts :ec="ec"/>
                </view>
              </view>
              <view wx:if="{{showTerminal}}" class="terminal-list-container">
                <view class="device-title">筛选设备轨迹</view>
                <view class="device-row-data" wx:for="{{deviceArray}}" wx:key="index" wx:for-index="index" wx:for-item="item" bindtap="deviceChecked({{index}})">
                    <text class="{{item.OnlineState==0?'Offline':'Online'}}">●</text>{{item.DeviceTag || item.DeviceId}} <view class="switch-container"><van-checkbox value="{{ item.checked }}"></van-checkbox></view>
                </view>
              </view>
              <rili id='rili' bind:myevent="closePop" default-value="{{startTimeYear}}.{{startTimeDate}}.{{endTimeYear}}.{{endTimeDate}}"></rili>
        </view>
        <view class="opera-container">
            <van-row gutter="30" class="opera-button-group">
              <van-col span="8" class="opera-button" >
                  <picker mode="multiSelector" bindchange="areaConfirm" bindcolumnchange="areaChange" value="{{areaValue}}" range="{{areaArray}}" range-key="text" custom-item="全部">
                    <view class="picker" bindtap="tapPicker">
                      {{areaValueName}}
                    </view>
                  </picker>
              </van-col>
              <van-col span="8" class="opera-button">
                  <picker bindchange="pickOpera" value="{{operaValue}}" range-key="text" range="{{operaColumns}}">
                      <view class="picker" style="boder-left: 1px solid #e5e5e5;" bindtap="tapPicker">
                        {{operaValue || '运营商'}}
                      </view>
                    </picker>
              </van-col>
              <van-col span="8" class="opera-button" bindtap='yunxin'>
                <view class="time_quantum">
                  <text class="start_year" space="nbsp">{{startTimeYear}}    {{endTimeYear}}</text>
                  <text class="a_date">{{startTimeDate}}-{{endTimeDate}}</text>
                </view>
              </van-col>
              
            </van-row>     
        </view>
        <view class="opera-view">
            <van-row gutter="30" class="opera-card-group">
              <van-col span="8" class="opera-col">
                 <view class="opera-card {{active=='0'?'active':'actives'}}" bindtap="mileageDetails(0)">
                    <view class="card-icon"><image src="../images/mileage-icon.png" class="icon"></image></view>
                    <view><image wx:if="{{loadingMileage}}" src="../images/loading.gif" class="loading card-num"></image><text wx:if="{{!loadingMileage}}" class="card-num">{{mileage}}</text></view>                 
                    <view><text class="card-text">里程数(km)</text><image src="../images/terminal-icon.png" wx:if="{{mileage>0}}" class="icon-terminal icon"></image></view> 
                 </view>
              </van-col>
              <van-col span="8" class="opera-col">
                <view class="opera-card {{active=='1'?'active':'actives'}}" bindtap="mileageDetails(1)">
                  <view class="card-icon"><image src="../images/times-icon.png" class="icon"></image></view>
                  <view><image wx:if="{{loadingDuration}}" src="../images/loading.gif" class="loading card-num"></image><text wx:if="{{!loadingDuration}}" class="card-num">{{duration}}</text></view>                  
                  <view><text class="card-text">测试时长(h)</text><image src="../images/terminal-icon.png" wx:if="{{duration>0}}" class="icon-terminal icon"></image></view>    
                </view>                
              </van-col>
              <van-col span="8" class="opera-col">
                <view class="opera-card {{active=='2'?'active':'actives'}}" bindtap="mileageDetails(2)">
                  <view class="card-icon"><image src="../images/add_mileage.png" class="icon"></image></view>
                  <view><image wx:if="{{loadingTerminal}}" src="../images/loading.gif" class="loading card-num"></image><text wx:if="{{!loadingTerminal}}" class="card-num">{{device}}</text></view>    
                  <view><text class="card-text">新增里程(km)</text><image src="../images/terminal-icon.png" wx:if="{{device>0}}" class="icon-terminal icon"></image></view>    
                </view>
              </van-col>
            </van-row>    
        </view>
    </view>
</template>
<script>
import wepy from 'wepy'
import moment from '../utils/moment.min.js'
import api from '../api/api.js'
import {wxRequest} from '../utils/wxRequest.js'
import QQMapWX from '../libs/qqmap-wx-jssdk.min.js'
import Echarts from '../components/echart'
export default class Home extends wepy.page {
  config = {
    usingComponents: {
      'van-row': '../components/vant/row/index',
      'van-col': '../components/vant/col/index',
      'van-checkbox': '../components/vant/checkbox/index',
      'rili': '../components/component/component'
    }
  }
  components = {
    echarts: Echarts
  }
  data = {
    startTimeYear: moment().subtract(7, 'days').format('YYYY'),
    endTimeYear: moment().subtract(1, 'days').format('YYYY'),
    startTimeDate: moment().subtract(7, 'days').format('MM.DD'),
    endTimeDate: moment().subtract(1, 'days').format('MM.DD'),
    fullStartTime: moment().subtract(7, 'days').format('YYYY-MM-DD'),
    fullEndTime: moment().subtract(1, 'days').format('YYYY-MM-DD'),
    map_narrow: 0,
    startTime: '',
    endTime: '',
    startDate: '',
    endDate: '',
    idx: 0,
    active: '',
    markers: [],
    polyline: [],
    mileage: 0,
    duration: 0,
    device: 0,
    areaStatic: [],
    areaArray: [[{text: '中国', id: 1}], [], [{text: '全部', id: 0}]],
    areaValue: [0, 0, 0],
    areaValueName: '中国',
    areaId: 0,
    areaType: 0,
    operaColumns: [{value: '', text: '运营商'}, {value: '2001', text: '中国移动'}, {value: '2002', text: '中国联通'}, {value: '2003', text: '中国电信'}],
    operaValue: null,
    operaId: '',
    latitude: '',
    longitude: '',
    scale: 4,
    scale_copy: 4,
    mapType: 1,
    showTerminal: false,
    deviceArray: [],
    deviceCheckedArray: [],
    loadingMileage: false,
    loadingDuration: false,
    loadingTerminal: false,
    title_icon: '',
    title_name: '',
    title_total: '',
    einheit: '',
    map_switch: true,
    ec: {
      lazyLoad: true,
      option: {
        grid: {
          left: '3%',
          right: '4%',
          bottom: '3%',
          top: '10%',
          containLabel: true,
          borderColor: 'rgba(255, 255, 255, 0.5)'
        },
        xAxis: {
          type: 'category',
          axisLine: {
            lineStyle: {
              color: 'rgba(255, 255, 255, 0.5)'
            }
          },
          axisLabel: {
            interval: 0,
            rotate: 40
          },
          data: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
        },
        yAxis: {
          type: 'value',
          axisLine: {
            lineStyle: {
              color: 'rgba(255, 255, 255, 0.5)'
            }
          },
          splitLine: {
            lineStyle: {
              color: 'rgba(255, 255, 255, 0.1)'
            }
          }
        },
        series: [{
          symbolSize: 6,
          itemStyle: {
            normal: {
              color: '#fff',
              lineStyle: {
                width: 1,
                color: '#fff'
              }
            }
          },
          data: [82, 93, 90, 93, 129, 133, 132],
          type: 'line'
        }]
      }
    }
  }
  computed = {}
  methods = {
    areaChange(e) {
      if (e.detail.column === 1) {
        this.areaArray[2] = this.areaArray[1][e.detail.value].children
        this.$apply()
      }
    },
    async areaConfirm(e) {
      const valueArea = e.detail.value
      if (valueArea[1] === 0) {
        this.areaValueName = '中国'
        this.areaId = 0
        this.areaType = 0
        this.scale = 5
        this.latitude = 33.56051741848503
        this.longitude = 111.30779874999999
        this.deviceArray = []
      } else {
        let areaName
        let location
        let scale
        let id
        let type
        if (valueArea[2] === 0) {
          areaName = this.areaArray[1][valueArea[1]].text
          location = this.areaArray[1][valueArea[1]].location
          id = this.areaArray[1][valueArea[1]].id
          scale = 8
          type = 1
        } else {
          areaName = this.areaArray[1][valueArea[1]].children[valueArea[2]].text
          location = this.areaArray[1][valueArea[1]].children[valueArea[2]].location
          id = this.areaArray[1][valueArea[1]].children[valueArea[2]].id
          scale = 11
          type = 2
        }
        this.latitude = location.lat
        this.longitude = location.lng
        this.areaValueName = areaName
        this.areaId = id
        this.areaType = type
        this.areaValue = e.detail.value
        this.scale = scale
        this.deviceArray = []
        this.deviceCheckedArray = []
      }
      this.polyline = []
      this.$apply()
      this.queryGIS()
      this.testIndex()
      if (!this.map_switch) {
        this.testMileage(this.idx)
      }
    },
    async pickOpera(e) {
      this.showTerminal = false
      this.operaValue = this.operaColumns[e.detail.value].text
      this.operaId = this.operaColumns[e.detail.value].value
      this.deviceArray = []
      this.deviceCheckedArray = []
      this.polyline = []
      this.$apply()
      this.queryGIS()
      this.testIndex()
      if (!this.map_switch) {
        this.testMileage(this.idx)
      }
    },
    async showTerminalFn() {
      if (this.deviceArray.length === 0 && !this.showTerminal) {
        await this.queryDevice()
      }
      this.showTerminal = true
      this.$apply()
    },
    tapMap() {
      this.showTerminal = false
      this.$apply()
    },
    tapPicker() {
      this.showTerminal = false
    },
    deviceChecked(index) {
      this.deviceArray[index].checked = !this.deviceArray[index].checked
      if (this.deviceArray[index].checked) {
        this.deviceCheckedArray.push(this.deviceArray[index])
        this.showTrajectory(this.deviceArray[index])
      } else {
        const indexR = this.deviceCheckedArray.indexOf(this.deviceArray[index])
        this.deviceCheckedArray.splice(indexR, 1)
        this.updateTrajectory(this.deviceArray[index].DeviceId)
      }
      /** 根据最后一个坐标系定位 **/
      if (this.deviceCheckedArray.length > 0) {
        this.latitude = this.deviceCheckedArray[this.deviceCheckedArray.length - 1].Latitude
        this.longitude = this.deviceCheckedArray[this.deviceCheckedArray.length - 1].Longitude
        this.scale = 16
      }
      this.$apply()
    },
    async regionChange(e) {
      if (e.type === 'end') {
        const that = this
        const scaleOld = this.scale_copy
        const scaleNew = await this.getScale()
        // "drag" 拖动 "scale" 缩放
        if (e.causedBy === 'scale') {
          clearTimeout(this.timeSet)
          if (scaleNew - scaleOld > 0) { /** 地图放大 **/
            this.timeSet = setTimeout(function() {
              that.pullData(scaleNew)
            }, 2500)
          } else if (scaleNew - scaleOld < 0) { /** 地图缩小 **/
            this.timeSet = setTimeout(function() {
              that.pullData(scaleNew)
            }, 2500)
          }
        }
        this.scale_copy = scaleNew
      }
    },

    // 里程数、测试时长、新增里程数详情点击
    mileageDetails(e) {
      if ((this.mileage > 0 && e === '0') || (this.duration > 0 && e === '1') || (this.device > 0 && e === '2')) {
        this.showTerminal = false

        if (this.active === e) {
          this.map_switch = true
          this.active = ''
        } else {
          this.map_switch = false
          this.active = e
        }

        if (e === '0') {
          this.title_icon = '../images/mileage-icon.png'
          this.title_name = '里程数'
          this.title_total = this.mileage
          this.einheit = 'km'
        // this.active=1
        } else if (e === '1') {
          this.title_icon = '../images/times-icon.png'
          this.title_name = '测试时长'
          this.title_total = this.duration
          this.einheit = 'h'
        // this.active=1
        } else {
          this.title_icon = '../images/add_mileage.png'
          this.title_name = '新增里程'
          this.title_total = this.device
          this.einheit = 'km'
        // this.active=1
        }
        this.idx = e
        if (!this.map_switch) {
          this.testMileage(e)
        }
        this.$apply()
      }
    },

    // 日历
    yunxin() {
      let that = this
      that.rili = that.$wxpage.selectComponent('#rili')

      that.rili.xianShi({
        data: function (res) {
          // console.log(res)// 选择的日期
          if (res != null) {
            if (res.length === 2) {
              let arr = res[0].data.split('-')
              let arr2 = res[1].data.split('-')

              that.startTime = arr.splice(0, 1)[0]
              that.endTime = arr2.splice(0, 1)[0]
              that.startDate = arr.join('.')
              that.endDate = arr2.join('.')
            }
          } else {
            that.startTime = ''
            that.endTime = ''
            that.startDate = ''
            that.endDate = ''
          }
        }
      })

      that.map_narrow = 1
      that.$apply()
    },

    // 日历确认和取消按钮
    closePop(event) {
      this.map_narrow = event.detail.close

      if (event.detail.changgeTime === 1) {
        if (this.startTime === this.endTime) {
          this.endTime = ' '
        }

        this.startTimeYear = this.startTime
        this.endTimeYear = this.endTime
        this.startTimeDate = this.startDate
        this.endTimeDate = this.endDate

        this.fullStartTime = this.startTimeYear + '-' + this.startTimeDate.replace('.', '-')

        if (this.endTimeYear === ' ') {
          this.fullEndTime = this.startTimeYear + '-' + this.endTimeDate.replace('.', '-')
        } else {
          this.fullEndTime = this.endTimeYear + '-' + this.endTimeDate.replace('.', '-')
        }

        this.testIndex()

        if (!this.map_switch) {
          this.testMileage(this.idx)
        }
      } else {
        this.$wxpage.selectComponent('#rili').onshow()
      }

      this.$apply()
    }

  }
  async pullData(level) {
    /** 点击刷新按钮 **/
    if (level.type && level.type === 'tap') {
      this.showTerminal = false
      this.queryGIS()
      this.testIndex()
    } else if (typeof level === 'number') { /** 地图缩放触发 **/
      level = await this.getScale()
      const regionChange = await this.setRegionInfo(level)
      if (regionChange) {
        this.testIndex()
        if (level > 11 && this.polyline.length > 0) {
            // somethings
        } else {
          this.queryGIS()
        }
      }
    }
  }
  /** 根据坐标获取地区信息 **/
  async setRegionInfo(level) {
    const that = this
    return new Promise((resolve, reject) => {
      this.mpCtx.getCenterLocation({
        success: function(e) {
          that.qqmapsdk.reverseGeocoder({
            location: {
              latitude: e.latitude,
              longitude: e.longitude
            },
            success: function(res) {
              const addressData = res.result.address_component
              let isChange = false
              if (level < 7) {
                if (that.areaId !== 0) {
                  that.areaValueName = '中国'
                  that.areaId = 0
                  that.areaType = 0
                  isChange = true
                }
              }
              if (level >= 7 && level < 11) {
                let provinceRow = that.areaStatic.filter(function(currentValue, index, arr) {
                  if (addressData.province.indexOf(currentValue.text) === 0) {
                    return currentValue
                  }
                })
                provinceRow = provinceRow[0]
                if (provinceRow.id !== that.areaId) {
                  that.latitude = e.latitude
                  that.longitude = e.longitude
                  that.$apply()
                  that.areaId = provinceRow.id
                  that.areaValueName = provinceRow.text
                  that.areaType = 1
                  that.areaArray[2] = provinceRow.children
                  isChange = true
                }
              } else if (level >= 11) {
                let provinceRow = that.areaStatic.filter(function(currentValue, index, arr) {
                  if (addressData.province.indexOf(currentValue.text) === 0) {
                    return currentValue
                  }
                })
                provinceRow = provinceRow[0]
                let cityRow = provinceRow.children.filter(function(currentValue, index, arr) {
                  if (addressData.city.indexOf(currentValue.text) === 0) {
                    return currentValue
                  }
                })
                cityRow = cityRow[0]
                if (cityRow.id !== that.areaId) {
                  that.latitude = e.latitude
                  that.longitude = e.longitude
                  that.$apply()
                  that.areaId = cityRow.id
                  that.areaValueName = cityRow.text
                  that.areaType = 2
                  isChange = true
                }
              }
              that.$apply()
              resolve(isChange)
            }
          })
        }
      })
    })
  }
  /** 地区查询 **/
  async queryArea() {
    let res = await wxRequest({}, api.HomeArea)
    if (res.data.State === 0) {
      this.areaStatic = res.data.Data.china
      this.areaArray[1] = res.data.Data.china
    }
  }
  /** 首页地图数据查询 **/
  async queryGIS() {
    const query = {
      AreaId: this.areaId,
      AreaType: this.areaType,
      OperatorId: this.operaId
    }
    const areaType = this.areaType
    let res = await wxRequest({query}, api.HomeIndex)
    if (res.data.State === 0) {
      const resData = res.data.Data
      let gisData = []
      this.deviceArray = []
      this.deviceCheckedArray = []
      this.polyline = []
      resData.map(function(data, index, array) {
        let rowData
        let label = {content: '' + '', borderWidth: 2, borderRadius: 5, bgColor: '#FFF', borderColor: '#FFF', padding: 4, anchorX: 15, anchorY: -30}
        if (areaType !== 2) {
          label.content = data.Count + ''
          const iconPath = '../images/taxi.png'
          rowData = {
            latitude: data.Location.Lat,
            longitude: data.Location.Lng
          }
          rowData.label = label
          rowData.iconPath = iconPath
        } else {
          label.content = data.DeviceTag ? data.DeviceTag : data.DeviceId + ''
          rowData = {
            label,
            latitude: data.Latitude,
            longitude: data.Longitude
          }
          if (data.OnlineState) {
            rowData.iconPath = '../images/Online.png'
          } else {
            rowData.iconPath = '../images/Offline.png'
          }
        }
        gisData.push(rowData)
      })
      this.markers = gisData
      this.$apply()
    }
  }
  /** 设备查询 **/
  async queryDevice() {
    const query = {
      AreaId: this.areaId,
      AreaType: this.areaType,
      OperatorId: this.operaId
    }
    let res = await wxRequest({query}, api.HomeDevice, true)
    if (res.data.State === 0) {
      this.deviceArray = res.data.Data
      this.$apply()
    }
  }
  /** 获取地图可视区域 **/
  getRegion() {
    return new Promise((resolve, reject) => {
      let region = {}
      this.mpCtx.getRegion({
        success: function(e) {
          region.northeast = e.northeast
          region.southwest = e.southwest
          resolve(region)
        }
      })
    })
  }
  /** 获取地图层级 **/
  getScale() {
    return new Promise((resolve, reject) => {
      this.mpCtx.getScale({
        success: function(e) {
          resolve(parseInt(e.scale))
        }
      })
    })
  }

  /** 测试指标数据 **/
  async testIndex() {
    this.loadingMileage = true
    this.loadingDuration = true
    this.loadingTerminal = true
    const query = {
      AreaId: this.areaId,
      AreaType: this.areaType,
      OperatorId: this.operaId,
      StartTime: this.fullStartTime,
      EndTime: this.fullEndTime
    }

    let res = await wxRequest({query}, api.TestIndex)
    if (res.data.State === 0) {
      const resData = res.data.Data
      this.mileage = Math.round(resData.TotalMileage)
      this.loadingMileage = false
      this.duration = Math.round(resData.Duration / 3600)
      this.loadingDuration = false
      this.device = Math.round(resData.NewMileage)
      this.loadingTerminal = false

      if (this.idx === '0') {
        this.title_total = this.mileage
      } else if (this.idx === '1') {
        this.title_total = this.duration
      } else {
        this.title_total = this.device
      }
      this.$apply()
    }
  }
  /** 根据时间段查询里程数、测试时长、新增里程数 **/
  async testMileage(e) {
    const query = {
      AreaId: this.areaId,
      AreaType: this.areaType,
      OperatorId: this.operaId,
      StartTime: this.fullStartTime,
      EndTime: this.fullEndTime
    }
    let res
    if (e === '0') {
      res = await wxRequest({query}, api.TestMileage)
    } else if (e === '1') {
      res = await wxRequest({query}, api.TestDuration)
    } else {
      res = await wxRequest({query}, api.TestNewMileage)
    }
    if (res.data.State === 0) {
      const resData = res.data.Data
      let timeArr = []
      let valueArr = []
      resData.forEach(function(currentValue) {
        timeArr.push(currentValue.Date.slice(5))
        if (e === '0' || e === '2') {
          valueArr.push(Math.round(currentValue.Value))
        } else {
          valueArr.push(Math.round(currentValue.Value / 3600))
        }
      })
      this.ec.option.xAxis.data = timeArr
      this.ec.option.series[0].data = valueArr

      setTimeout(function() {
        this.$invoke('echarts', 'init')
      }.bind(this), 20)
    }
  }
  onShow() {
    this.mpCtx = wepy.createMapContext('map', this)
  }
  async showTrajectory(deviceData) {
    const query = {
      deviceId: deviceData.DeviceId,
      StartTime: this.fullStartTime,
      EndTime: this.fullEndTime
    }
    let res = await wxRequest({query}, api.TestTrajectoryHistory)
    const deviceMapData = res.data.Data
    for (let i = 0; i < deviceMapData.length; i++) {
      this.polyline.push({
        points: deviceMapData[i],
        width: 4,
        deviceId: deviceData.DeviceId,
        color: deviceData.Color
      })
    }
    this.markers = []
    this.$apply()
  }
  updateTrajectory(deviceId) {
    for (let i = 0; i < this.polyline.length; i++) {
      const row = this.polyline[i]
      if (row.deviceId === deviceId) {
        this.polyline.splice(i, 1)
        this.$apply()
        break
      }
    }
  }
  onLoad() {
    if (this.startTimeYear === this.endTimeYear) {
      this.endTimeYear = ''
    }
    this.qqmapsdk = new QQMapWX({key: 'VCEBZ-M4NC5-NN7IM-QTZTQ-ECK7J-DHFI7'})
     /** 设置地图中心点 **/
    this.latitude = 33.56051741848503
    this.longitude = 111.30779874999999
    this.$apply()
    this.queryArea()
    this.queryGIS()
    this.testIndex()
  }
}
</script>
